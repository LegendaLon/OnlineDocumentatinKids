let BlockData = {
  "program": [
    {
      title: 'Головний блок',
      image: 'program.png',
      text: 'Блок program - початок всіх програм. Комірка setup - виконується один раз, а loop - завжди',
      description: undefined,
      alert: [
        'Блок program може бути лише 1',
      ]
    },

    {
      title: 'Затримка',
      image: 'delaymillis.png',
      text: 'Блок для створення затримки, программа зупиняється на вказаний час',
      description: undefined,
      alert: [
        'Значення потрібно вказувати в мілісекундах. 1000 мілісекунд - 1 секунда.',
      ]
    },

    {
      title: 'Умова',
      image: 'ifmini.png',
      text: 'Виконує комірку then, якщо умова в test - вірна.',
      description: undefined,
      alert: [
        'Умова може приймати 2 стани правда(HIGH) або брехня(LOW)'
      ],
    },

    {
      title: 'Умова (повна)',
      image: 'ifelse.png',
      text: 'Виконує комірку then, якщо умова в test - вірна.',
      description: "Якщо умова в test - брехня. Виконує комірку else",
      alert: [
        'Умова може приймати 2 стани правда(HIGH) або брехня(LOW)'
      ],
    },

    {
      title: 'Підпрограмма',
      image: 'subroutinecommands.png',
      text: 'Вам потрібно змінити назву з subroutine, на будь-яку іншу.',
      description: "Всі блоки, які ви підкріпите до комірки commands будуть виконуватись. Коли є підпрограмма викованець з таким же ім\'ям.",
      alert: [
        'Блок з однією назвою може бути лише 1',
        'Назва не може починатися з цифри, в назві не може бути пробілів та спеціальних символів.',
      ],
    },

    {
      title: 'Підпрограмма виконавець',
      image: 'subroutine.png',
      text: 'Вам потрібно змінити назву з subroutine на будь яку іншу.',
      description: "Виконуює команди які прикріплені до блока підпрограмми з однаковою назвою.",
      alert: [
        'Потрібно вказати ім\'я підпрограмми(блок показаний вище).',
      ],
    },
  ],
  
  'pins':[
    {
      title: 'Керування цифровими пінами',
      image: 'setdigitaloutput.png',
      text: 'Блок для включення та виключення піна. Потрібно вказати пін, та його стан. HIGH - включено, LOW - виключено.',
      description: undefined,
      alert: undefined,
    },

    {
      title: 'Отримання значення з аналогово піна',
      image: 'inputanalogpin.png',
      text: 'Блок для отримання стану піна, Потрібно вказати пін в який підключено датчик. ',
      description: 'Може повертати тільки 1024 значеня(0-1023).',
      alert: undefined,
    },

    {
      title: 'Отримання стану цифрового піна',
      image: 'inputdigitalpin.png',
      text: 'Блок для отримання стану цифрового піна. Потрібно вказати пін в який підключено датчик.',
      description: 'Може повертати тільки 2 значення. HIGH - включено, LOW - виключено.',
      alert: undefined,
    },

    {
      title: 'Керування аналоговими пінами',
      image: 'setanalogoutput.png',
      text: 'Блок для зміни значення на аналоговому піні.',
      description: 'В першу комірку вказується пін який може генерувати ШІМ сигнал(позначений ~). В другу вказується значення піна від 0 до 255.',
      alert: undefined,
    },
  ],

  "mathoperators": [
    {
      title: 'Випадкові числа',
      image: 'random.png',
      text: 'Блок для генерування випадкогово числа.',
      description: 'В першу комірку(min), ми вказуємо мінімальне число, яке буде генеруватись. В другу комірку(max), вказуємо максимальне число, яке буде генеруватись',
      alert: [
        'В другу комірку(max) потрібно вказувати на 1 одиницю більше. Якщо вказати 100, то генеруватись буде лише 99.'
      ],
    },
  ]
}