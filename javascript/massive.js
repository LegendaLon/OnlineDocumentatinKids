let BlockData = {
  "control": [
    {
      title: 'Головний блок',
      image: 'program.png',
      text: 'Блок program - початок всіх програм. Комірка setup - виконується один раз, а loop - завжди.',
      description: undefined,
      alert: [
        'Блок program може бути лише один.',
      ]
    },

    {
      title: 'Затримка',
      image: 'delaymillis.png',
      text: 'Блок для створення затримки. Програма зупиняється на вказаний час.',
      description: undefined,
      alert: [
        'Значення потрібно вказувати в мілісекундах. 1000 мілісекунд - 1 секунда.',
      ]
    },

    {
      title: 'Умова',
      image: 'ifmini.png',
      text: 'Виконує комірку then, якщо умова в test - вірна.',
      description: undefined,
      alert: [
        'Умова може приймати два стани: правда (HIGH) або брехня (LOW).'
      ],
    },

    {
      title: 'Умова (повна)',
      image: 'ifelse.png',
      text: 'Виконує комірку then, якщо умова в test - вірна. Якщо умова в test - брехня, виконується комірка else.',
      description: undefined,
      alert: [
        'Умова може приймати два стани: правда (HIGH) або брехня (LOW).'
      ],
    },

    {
      title: 'Підпрограмма',
      image: 'subroutinecommands.png',
      text: 'Вам потрібно змінити назву з "subroutine" на будь-яку іншу.',
      description: "Всі блоки, які ви підкріпите до комірки commands, будуть виконуватись. При виклику підпрограмми з такою ж назвою, виконуються прикріплені команди.",
      alert: [
        'Блок з однією назвою може бути лише один.',
        'Назва не може починатися з цифри, в назві не може бути пробілів та спеціальних символів.',
      ],
    },

    {
      title: 'Підпрограмма виконавець',
      image: 'subroutine.png',
      text: 'Вам потрібно змінити назву з "subroutine" на будь-яку іншу.',
      description: "Виконує команди, які прикріплені до блока підпрограмми з однаковою назвою.",
      alert: [
        'Потрібно вказати ім\'я підпрограмми (блок показаний вище).',
      ],
    },
  ],
  
  'pins':[
    {
      title: 'Керування цифровими пінами',
      image: 'setdigitaloutput.png',
      text: 'Блок для включення та виключення піна. Потрібно вказати пін та його стан. HIGH - включено, LOW - виключено.',
      description: undefined,
      alert: undefined,
    },

    {
      title: 'Отримання значення з аналогового піна',
      image: 'inputanalogpin.png',
      text: 'Блок для отримання стану піна. Потрібно вказати пін, до якого підключено датчик. ',
      description: 'Може повертати тільки 1024 значення (від 0 до 1023).',
      alert: undefined,
    },

    {
      title: 'Отримання стану цифрового піна',
      image: 'inputdigitalpin.png',
      text: 'Блок для отримання стану цифрового піна. Потрібно вказати пін, до якого підключено датчик.',
      description: 'Може повертати тільки 2 значення: HIGH - включено, LOW - виключено.',
      alert: undefined,
    },

    {
      title: 'Керування аналоговими пінами',
      image: 'setanalogoutput.png',
      text: 'Блок для зміни значення на аналоговому піні.',
      description: 'У першій комірці вказується пін, який може генерувати ШІМ сигнал (позначений ~). У другій вказується значення піна від 0 до 255.',
      alert: undefined,
    },
  ],

  "mathoperators": [
    {
      title: 'Випадкові числа',
      image: 'random.png',
      text: 'Блок для генерування випадкового числа.',
      description: 'У першій комірці (min) вказуємо мінімальне число, яке буде генеруватись. У другій комірці (max) вказуємо максимальне число, яке буде генеруватись.',
      alert: [
        'У другій комірці (max) потрібно вказувати на 1 одиницю більше. Якщо вказати 100, то буде генеруватись лише числа від 0 до 99.'
      ],
    },

    {
      title: 'Перетворення діапазонів',
      image: 'map.png',
      text: 'Блок який перетворює один діапазон значень в інший.',
      description: 'В першу комірку (value) вказуєте дані, які будуть перетворюватись. В другу та третю (from) вказуєте з якого діапазону перетворювати. У четверту та п\'яту (to) вказуєте в який діапазон перетворити.',
      alert: [
        'Не обов\'яково щоб діапазони вказувались з 0. Можливо вказувати 512-1023 або 127-255'
      ],
    },
  ],

  "generichardware": [
    {
      title: 'Керування серво мотором',
      image: 'servo.png',
      text: 'Блок для керування серво мотором.',
      description: 'У першій комірці вказується пін, в який підключено серво мотор. У другій комірці - число (кут) від 0 до 180, на який потрібно повернути серво мотор.',
      alert: [
        'СЕРВО МОТОР НЕ МОЖНА КРУТИТИ РУКАМИ',
        "Якщо ви працюєте з Leo6, не можна виставляти кут серво мотора менше 30 (вліво) та більше 150 (вправо). В Leo6 серво мотор підключений до 11 піна (потрібно вказати 11 в першій комірці).",
      ],
    },

    {
      title: 'Отримання дистанціі з УЗ-даліноміра',
      image: 'ultrasonic.png',
      text: 'Повертає дистанцію до перешкоди в сантиметрах.',
      description: 'В першу комірку потрібно вказати пін, в який підключено trig з датчика. В другу комірку вказуємо пін, в який підключено echo.',
      alert: [
        'Максимальна дистанція - 200 см',
        'Якщо перешкоди немає - повертає 200 см.',
      ],
    },
  ]
}